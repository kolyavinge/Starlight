#include <lib/Exceptions.h>
#include <anx/ColorTemperatureFunc.h>

NormalizedRGB::NormalizedRGB()
{
    R = 0.0f;
    G = 0.0f;
    B = 0.0f;
}

NormalizedRGB::NormalizedRGB(float r, float g, float b)
{
    R = r;
    G = g;
    B = b;
}

ColorTemperatureFunc::ColorTemperatureFunc()
{
    // http://www.vendian.org/mncharity/dir3/blackbody/UnstableURLs/bbr_color.html

    NormalizedRGB a[ColorsCount] =
    {
        NormalizedRGB(1.0000f, 0.0401f, 0.0000f),
        NormalizedRGB(1.0000f, 0.0631f, 0.0000f),
        NormalizedRGB(1.0000f, 0.0860f, 0.0000f),
        NormalizedRGB(1.0000f, 0.1085f, 0.0000f),
        NormalizedRGB(1.0000f, 0.1303f, 0.0000f),
        NormalizedRGB(1.0000f, 0.1515f, 0.0000f),
        NormalizedRGB(1.0000f, 0.1718f, 0.0000f),
        NormalizedRGB(1.0000f, 0.1912f, 0.0000f),
        NormalizedRGB(1.0000f, 0.2097f, 0.0000f),
        NormalizedRGB(1.0000f, 0.2272f, 0.0000f),
        NormalizedRGB(1.0000f, 0.2484f, 0.0061f),
        NormalizedRGB(1.0000f, 0.2709f, 0.0153f),
        NormalizedRGB(1.0000f, 0.2930f, 0.0257f),
        NormalizedRGB(1.0000f, 0.3149f, 0.0373f),
        NormalizedRGB(1.0000f, 0.3364f, 0.0501f),
        NormalizedRGB(1.0000f, 0.3577f, 0.0640f),
        NormalizedRGB(1.0000f, 0.3786f, 0.0790f),
        NormalizedRGB(1.0000f, 0.3992f, 0.0950f),
        NormalizedRGB(1.0000f, 0.4195f, 0.1119f),
        NormalizedRGB(1.0000f, 0.4394f, 0.1297f),
        NormalizedRGB(1.0000f, 0.4589f, 0.1483f),
        NormalizedRGB(1.0000f, 0.4781f, 0.1677f),
        NormalizedRGB(1.0000f, 0.4970f, 0.1879f),
        NormalizedRGB(1.0000f, 0.5155f, 0.2087f),
        NormalizedRGB(1.0000f, 0.5336f, 0.2301f),
        NormalizedRGB(1.0000f, 0.5515f, 0.2520f),
        NormalizedRGB(1.0000f, 0.5689f, 0.2745f),
        NormalizedRGB(1.0000f, 0.5860f, 0.2974f),
        NormalizedRGB(1.0000f, 0.6028f, 0.3207f),
        NormalizedRGB(1.0000f, 0.6193f, 0.3444f),
        NormalizedRGB(1.0000f, 0.6354f, 0.3684f),
        NormalizedRGB(1.0000f, 0.6511f, 0.3927f),
        NormalizedRGB(1.0000f, 0.6666f, 0.4172f),
        NormalizedRGB(1.0000f, 0.6817f, 0.4419f),
        NormalizedRGB(1.0000f, 0.6966f, 0.4668f),
        NormalizedRGB(1.0000f, 0.7111f, 0.4919f),
        NormalizedRGB(1.0000f, 0.7253f, 0.5170f),
        NormalizedRGB(1.0000f, 0.7392f, 0.5422f),
        NormalizedRGB(1.0000f, 0.7528f, 0.5675f),
        NormalizedRGB(1.0000f, 0.7661f, 0.5928f),
        NormalizedRGB(1.0000f, 0.7792f, 0.6180f),
        NormalizedRGB(1.0000f, 0.7919f, 0.6433f),
        NormalizedRGB(1.0000f, 0.8044f, 0.6685f),
        NormalizedRGB(1.0000f, 0.8167f, 0.6937f),
        NormalizedRGB(1.0000f, 0.8286f, 0.7187f),
        NormalizedRGB(1.0000f, 0.8403f, 0.7437f),
        NormalizedRGB(1.0000f, 0.8518f, 0.7686f),
        NormalizedRGB(1.0000f, 0.8630f, 0.7933f),
        NormalizedRGB(1.0000f, 0.8740f, 0.8179f),
        NormalizedRGB(1.0000f, 0.8847f, 0.8424f),
        NormalizedRGB(1.0000f, 0.8952f, 0.8666f),
        NormalizedRGB(1.0000f, 0.9055f, 0.8907f),
        NormalizedRGB(1.0000f, 0.9156f, 0.9147f),
        NormalizedRGB(1.0000f, 0.9254f, 0.9384f),
        NormalizedRGB(1.0000f, 0.9351f, 0.9619f),
        NormalizedRGB(1.0000f, 0.9445f, 0.9853f),
        NormalizedRGB(0.9917f, 0.9458f, 1.0000f),
        NormalizedRGB(0.9696f, 0.9336f, 1.0000f),
        NormalizedRGB(0.9488f, 0.9219f, 1.0000f),
        NormalizedRGB(0.9290f, 0.9107f, 1.0000f),
        NormalizedRGB(0.9102f, 0.9000f, 1.0000f),
        NormalizedRGB(0.8923f, 0.8897f, 1.0000f),
        NormalizedRGB(0.8753f, 0.8799f, 1.0000f),
        NormalizedRGB(0.8591f, 0.8704f, 1.0000f),
        NormalizedRGB(0.8437f, 0.8614f, 1.0000f),
        NormalizedRGB(0.8289f, 0.8527f, 1.0000f),
        NormalizedRGB(0.8149f, 0.8443f, 1.0000f),
        NormalizedRGB(0.8014f, 0.8363f, 1.0000f),
        NormalizedRGB(0.7885f, 0.8285f, 1.0000f),
        NormalizedRGB(0.7762f, 0.8211f, 1.0000f),
        NormalizedRGB(0.7644f, 0.8139f, 1.0000f),
        NormalizedRGB(0.7531f, 0.8069f, 1.0000f),
        NormalizedRGB(0.7423f, 0.8002f, 1.0000f),
        NormalizedRGB(0.7319f, 0.7938f, 1.0000f),
        NormalizedRGB(0.7219f, 0.7875f, 1.0000f),
        NormalizedRGB(0.7123f, 0.7815f, 1.0000f),
        NormalizedRGB(0.7030f, 0.7757f, 1.0000f),
        NormalizedRGB(0.6941f, 0.7700f, 1.0000f),
        NormalizedRGB(0.6856f, 0.7645f, 1.0000f),
        NormalizedRGB(0.6773f, 0.7593f, 1.0000f),
        NormalizedRGB(0.6693f, 0.7541f, 1.0000f),
        NormalizedRGB(0.6617f, 0.7492f, 1.0000f),
        NormalizedRGB(0.6543f, 0.7444f, 1.0000f),
        NormalizedRGB(0.6471f, 0.7397f, 1.0000f),
        NormalizedRGB(0.6402f, 0.7352f, 1.0000f),
        NormalizedRGB(0.6335f, 0.7308f, 1.0000f),
        NormalizedRGB(0.6271f, 0.7265f, 1.0000f),
        NormalizedRGB(0.6208f, 0.7224f, 1.0000f),
        NormalizedRGB(0.6148f, 0.7183f, 1.0000f),
        NormalizedRGB(0.6089f, 0.7144f, 1.0000f),
        NormalizedRGB(0.6033f, 0.7106f, 1.0000f),
        NormalizedRGB(0.5978f, 0.7069f, 1.0000f),
        NormalizedRGB(0.5925f, 0.7033f, 1.0000f),
        NormalizedRGB(0.5873f, 0.6998f, 1.0000f),
        NormalizedRGB(0.5823f, 0.6964f, 1.0000f),
        NormalizedRGB(0.5774f, 0.6930f, 1.0000f),
        NormalizedRGB(0.5727f, 0.6898f, 1.0000f),
        NormalizedRGB(0.5681f, 0.6866f, 1.0000f),
        NormalizedRGB(0.5637f, 0.6836f, 1.0000f),
        NormalizedRGB(0.5593f, 0.6806f, 1.0000f),
        NormalizedRGB(0.5551f, 0.6776f, 1.0000f),
        NormalizedRGB(0.5510f, 0.6748f, 1.0000f),
        NormalizedRGB(0.5470f, 0.6720f, 1.0000f),
        NormalizedRGB(0.5432f, 0.6693f, 1.0000f),
        NormalizedRGB(0.5394f, 0.6666f, 1.0000f),
        NormalizedRGB(0.5357f, 0.6640f, 1.0000f),
        NormalizedRGB(0.5322f, 0.6615f, 1.0000f),
        NormalizedRGB(0.5287f, 0.6590f, 1.0000f),
        NormalizedRGB(0.5253f, 0.6566f, 1.0000f),
        NormalizedRGB(0.5220f, 0.6542f, 1.0000f),
        NormalizedRGB(0.5187f, 0.6519f, 1.0000f),
        NormalizedRGB(0.5156f, 0.6497f, 1.0000f),
        NormalizedRGB(0.5125f, 0.6474f, 1.0000f),
        NormalizedRGB(0.5095f, 0.6453f, 1.0000f),
        NormalizedRGB(0.5066f, 0.6432f, 1.0000f),
        NormalizedRGB(0.5037f, 0.6411f, 1.0000f),
        NormalizedRGB(0.5009f, 0.6391f, 1.0000f),
        NormalizedRGB(0.4982f, 0.6371f, 1.0000f),
        NormalizedRGB(0.4955f, 0.6351f, 1.0000f),
        NormalizedRGB(0.4929f, 0.6332f, 1.0000f),
        NormalizedRGB(0.4904f, 0.6314f, 1.0000f),
        NormalizedRGB(0.4879f, 0.6295f, 1.0000f),
        NormalizedRGB(0.4854f, 0.6277f, 1.0000f),
        NormalizedRGB(0.4831f, 0.6260f, 1.0000f),
        NormalizedRGB(0.4807f, 0.6243f, 1.0000f),
        NormalizedRGB(0.4785f, 0.6226f, 1.0000f),
        NormalizedRGB(0.4762f, 0.6209f, 1.0000f),
        NormalizedRGB(0.4740f, 0.6193f, 1.0000f),
        NormalizedRGB(0.4719f, 0.6177f, 1.0000f),
        NormalizedRGB(0.4698f, 0.6161f, 1.0000f),
        NormalizedRGB(0.4677f, 0.6146f, 1.0000f),
        NormalizedRGB(0.4657f, 0.6131f, 1.0000f),
        NormalizedRGB(0.4638f, 0.6116f, 1.0000f),
        NormalizedRGB(0.4618f, 0.6102f, 1.0000f),
        NormalizedRGB(0.4599f, 0.6087f, 1.0000f),
        NormalizedRGB(0.4581f, 0.6073f, 1.0000f),
        NormalizedRGB(0.4563f, 0.6060f, 1.0000f),
        NormalizedRGB(0.4545f, 0.6046f, 1.0000f),
        NormalizedRGB(0.4527f, 0.6033f, 1.0000f),
        NormalizedRGB(0.4510f, 0.6020f, 1.0000f),
        NormalizedRGB(0.4493f, 0.6007f, 1.0000f),
        NormalizedRGB(0.4477f, 0.5994f, 1.0000f),
        NormalizedRGB(0.4460f, 0.5982f, 1.0000f),
        NormalizedRGB(0.4445f, 0.5970f, 1.0000f),
        NormalizedRGB(0.4429f, 0.5958f, 1.0000f),
        NormalizedRGB(0.4413f, 0.5946f, 1.0000f),
        NormalizedRGB(0.4398f, 0.5935f, 1.0000f),
        NormalizedRGB(0.4384f, 0.5923f, 1.0000f),
        NormalizedRGB(0.4369f, 0.5912f, 1.0000f),
        NormalizedRGB(0.4355f, 0.5901f, 1.0000f),
    };

    _colors.CopyFrom(a, ColorsCount);
}

NormalizedRGB ColorTemperatureFunc::GetColor(float normalizedValue)
{
    if (!(0.0f <= normalizedValue && normalizedValue <= 1.0f)) throw ArgumentException();

    int i = (int)(normalizedValue * ColorsMaxIndexFloat);

    return _colors[i];
}
